<#@ include file="$(PlatzObjectBuilderTemplateDirectory)PlatzDataService.Tools.ttinclude" #>
<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ import namespace="Platz.ObjectBuilder" #>
<#@ import namespace="Platz.SqlForms" #>
<# // ================================================================ Set JsonStorePath here, relative to solution folder ================================== #>
<#      var JsonStorePath = @"Platz.SqlForms.Demo\SchemaStore"; #>
<# // ======================================================================================================================================================= #>
<# 
        StoreSchema Schema = null;
        List<StoreQuery> Queries = new List<StoreQuery>();
        JsonStoreSchemaParser Parser = new JsonStoreSchemaParser();

        Generate(); 
#>
// *******************************************************************************************************
// This code is auto generated by Platz.ObjectBuilder template, any changes made to this code will be lost
// *******************************************************************************************************
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Platz.ObjectBuilder;
using Platz.SqlForms;
<#
    var ctxName = Schema.DbContextName;
    var namespaceName = Schema.Namespace;
#>
using <#=namespaceName#>;

<#
    if (Queries != null && Queries.Count > 0)
    {
#>
namespace <#=Queries.First().Namespace#>
{
    #region Interface 

    public partial interface I<#=Queries.First().DataService#>
    {
<#
        foreach (var query in Queries)
        {
#>
        List<<#=query.ReturnTypeName#>> <#=query.Name#>(params object[] parameters);
<#
        }
#>
    }

    #endregion

    #region Data Service 

    public partial class <#=Queries.First().DataService#> : StoreDataServiceBase<<#=ctxName#>>, I<#=Queries.First().DataService#>
    {
<# 
        foreach (var query in Queries)
        {
            var from = Parser.ReadFrom(query, Schema);
            var joins = Parser.ReadJoins(query, Schema);
            var where = Parser.QueryExprToSql(query.Query.Where.Expression, JsonStoreSchemaParser.SqlOperatorsMap);
            var parameters = Parser.ReadParameters(query);
#>
        public List<<#=query.ReturnTypeName#>> <#=query.Name#>(params object[] parameters)
        {
            var sql = @$"
SELECT
<#
            var comma = "  ";

            foreach (var field in query.Query.Fields.Values.Where(f => f.IsOutput))
            {
                var table = query.Query.Tables[field.Field.ObjectAlias];
                var definition = Schema.Definitions[table.TableName];
                var property = definition.Properties[field.Field.FieldName];
                var alias = $" AS {field.FieldAlias ?? field.Field.FieldName}";
                string sf;
                
                if ( property.Pk || property.Fk)
                {
                    sf = $"{field.Field.ObjectAlias}.{field.Field.FieldName}";
                }
                else
                {
                    sf = $"JSON_VALUE({field.Field.ObjectAlias}.data, '$.{field.Field.FieldName}')";

                    if (property.Type != "string")
                    {
                        var sft = Parser.ToSqlType(property.Type); 
                        sf = $"TRY_CAST({sf} AS {sft})";
                    }
                }
#>
    <#=comma#><#=sf#><#=alias#>
<#
                comma = ", ";
            }
#>
FROM [<#=Schema.Name#>].[<#=from.LeftObject#>] <#=from.LeftObjectAlias#>
<#          foreach (var j in joins) 
            {
#>
INNER JOIN [<#=Schema.Name#>].[<#=j.RightObject#>] <#=j.RightObjectAlias#> ON <#=j.LeftObjectAlias#>.<#=j.LeftField#> = <#=j.RightObjectAlias#>.<#=j.RightField#>
<#          } 
            
            if (!string.IsNullOrWhiteSpace(where))
            {
#>
WHERE <#=where#>
<#
            }
#>
";
            using var db = GetDbContext();
            var result = db.ExecuteQuery<<#=query.ReturnTypeName#>>(sql, parameters);
            return result;
        }

<#
        }
#>
    }

    #endregion

    #region Entities

<#
        foreach (var query in Queries)
        {
#>
    public partial class <#=query.ReturnTypeName#>
    {
<#
            foreach (var field in query.Query.Fields.Values)
            {
                if (!field.IsOutput)
                {
                    continue;
                }

                var table = query.Query.Tables[field.Field.ObjectAlias];
                var definition = Schema.Definitions[table.TableName];
                var property = definition.Properties[field.Field.FieldName];
                var fieldType = Parser.DesignShemaTypeToCSharp(property);
#>
        public <#=fieldType#> <#=field.FieldAlias ?? property.Name#> { get; set; }
<#
            }
#>
    }

<#
        }
#>
    #endregion
}
<#
    }
        void Generate()
        {
            var parser = new JsonStoreSchemaParser();
            var path = Path.Combine(GetSolutionDirectory(), JsonStorePath);
            var files = Directory.GetFiles(path);

            foreach (var file in files)
            {
                var json = File.ReadAllText(file);
                var fileName = Path.GetFileName(file).ToLower();

                if (fileName.EndsWith("schema.json") || fileName.EndsWith("schema.migrations.json"))
                {
                    // ignore schema files
                    // Schema = parser.ReadSchema(json);
                }
                else
                {
                    var q = parser.ReadQuery(json);
                    Queries.Add(q);
                }
            }

            if (Queries.Any())
            {
                var json = File.ReadAllText(Queries.First().SchemaFile);
                Schema = parser.ReadSchema(json);
            }
        }

        // t4 specific methods

        string GetSolutionDirectory()
        {
            var serviceProvider = this.Host as IServiceProvider;
            var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
        }
#>