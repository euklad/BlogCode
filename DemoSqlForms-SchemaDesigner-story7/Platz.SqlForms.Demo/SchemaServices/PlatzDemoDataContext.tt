<#@ include file="$(PlatzObjectBuilderTemplateDirectory)PlatzDataService.Tools.ttinclude" #>
<#@ template language="C#" hostspecific="True" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ import namespace="Platz.SqlForms" #>
<#@ import namespace="Platz.ObjectBuilder" #>
<# // ================================================================ Set JsonStorePath here, relative to solution folder ================================== #>
<#      string JsonStorePath = @"Platz.SqlForms.Demo\SchemaStore\PlatzDemo.schema.json"; #>
<# // ======================================================================================================================================================= #>
<# 
        StoreSchema Schema = null;
        JsonStoreSchemaParser Parser = new JsonStoreSchemaParser();

        var path = Path.Combine(GetSolutionDirectory(), JsonStorePath);
        var json = File.ReadAllText(path);
        Schema = Parser.ReadSchema(json);
#>
// *******************************************************************************************************
// This code is auto generated by Platz.ObjectBuilder template, any changes made to this code will be lost
// *******************************************************************************************************
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Platz.ObjectBuilder;
using Platz.SqlForms;
<#
    var contextName = Schema.DbContextName;
    var namespaceName = Schema.Namespace;
    var contextNamelist = contextName.Split('.').ToList();
    var migrationsPath = Path.ChangeExtension(JsonStorePath, null);
    migrationsPath += ".migrations.json";
    migrationsPath = migrationsPath.Substring(migrationsPath.IndexOf(@"\"));
#>
using <#=namespaceName#>;

namespace <#=namespaceName#>
{
    #region Data Context 

    public partial class <#=contextName#> : DataContextBase
    {
        protected override void Configure(DataContextSettings settings)
        {
            settings.SetSchema("<#=Schema.Name#>");
            settings.SetDriver<SqlJsonStoreDatabaseDriver>();
            settings.MigrationsPath = @"<#=migrationsPath#>";

<#
            foreach (var table in Schema.Definitions.Values)
            {
#>
            settings.AddTable<<#=table.Name#>>();
<#
            }
#>
        }
    }

    #endregion

    #region Entities

<#
        foreach (var table in Schema.Definitions.Values)
        {
#>
    public partial class <#=table.Name#>
    { 
<#
            foreach (var property in table.Properties.Values)
            {
#>
        public virtual <#=Parser.DesignShemaTypeToCSharp(property)#> <#=property.Name#> { get; set; }
<#
            }
#>
    }

<#
    }
#>
    #endregion
}    

<#
        // t4 specific methods

        string GetSolutionDirectory()
        {
            var serviceProvider = this.Host as IServiceProvider;
            var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
        }
#>