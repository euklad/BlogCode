<#@ template language="C#" hostspecific="True" #>
<#@ include file="$(PlatzObjectBuilderTemplateDirectory)PlatzDataService.Tools.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ import namespace="Platz.ObjectBuilder" #>
<#@ import namespace="Platz.SqlForms" #>
<# // ================================================================ Set JsonStorePath here, relative to solution folder ================================== #>
<#      var JsonStorePath = @"DemoSqlForms.ObjectBuilder.App\StoreData"; #>
<# // ======================================================================================================================================================= #>
<# 
        StoreSchema Schema = null;
        List<StoreQuery> Queries = new List<StoreQuery>();
        JsonStoreSchemaParser Parser = new JsonStoreSchemaParser();

        Generate(); 
#>
// *******************************************************************************************************
// This code is auto generated by Platz.ObjectBuilder template, any changes made to this code will be lost
// *******************************************************************************************************
using System;
using System.Collections.Generic;
using System.Text;
using System.Linq;
using Platz.SqlForms;
<#
    var contextName = Schema.DbContextName;
    var contextNamelist = contextName.Split('.').ToList();
    var ctxName = contextNamelist.Last();
    contextNamelist.Remove(contextNamelist.Last());
    var namespaceName = string.Join(".", contextNamelist.ToArray());
#>
using <#=namespaceName#>;

<#
    if (Queries != null && Queries.Count > 0)
    {
#>
namespace <#=Queries.First().Namespace#>
{
    #region Interface 

    public partial interface I<#=Queries.First().DataService#>
    {
<#
        foreach (var query in Queries)
        {
            if (query.Query.Parameters != null && query.Query.Parameters.Any())
            {
#>
        List<<#=query.ReturnTypeName#>> <#=query.Name#>(params object[] parameters);
<#
            }
            else
            {
#>
        List<<#=query.ReturnTypeName#>> <#=query.Name#>();
<#
            }
        }
#>
    }

    #endregion

    #region Data Service 

    public partial class <#=Queries.First().DataService#> : DataServiceBase<<#=ctxName#>>, I<#=Queries.First().DataService#>
    {
<# 
        foreach (var query in Queries)
        {
            var from = Parser.ReadFrom(query, Schema);
            var joins = Parser.ReadJoins(query, Schema);
            var where = Parser.QueryExprToString(query.Query.Where.Expression, JsonStoreSchemaParser.CSharpOperatorsMap);
            var parameters = Parser.ReadParameters(query);

            if (query.Query.Parameters != null && query.Query.Parameters.Any())
            {
#>
        public List<<#=query.ReturnTypeName#>> <#=query.Name#>(params object[] parameters)
        {
<#
                for (int i = 0; i < parameters.Count; i++)
                {
                    var p = parameters[i];
#>
            var <#=p.Name#> = (<#=p.Type#>)parameters[<#=i#>];
<#
                }
#>

<#
            }
            else
            {
#>
        public List<<#=query.ReturnTypeName#>> <#=query.Name#>()
        {
<#
            }
#>
            using (var db = GetDbContext())
            {
                var query =
                    from <#=from.LeftObjectAlias#> in db.<#=from.LeftObject#> 
<#          foreach (var j in joins) 
            {
#>
                    join <#=j.RightObjectAlias#> in db.<#=j.RightObject#> on <#=j.LeftObjectAlias#>.<#=j.LeftField#> equals <#=j.RightObjectAlias#>.<#=j.RightField#>
<#          } 
            
            if (!string.IsNullOrWhiteSpace(where))
            {
#>
                    where <#=where#>
<#
            }
#>
                    select new <#=query.ReturnTypeName#>
                    {
<#
            foreach (var field in query.Query.Fields.Values.Where(f => f.IsOutput))
            {
                var table = query.Query.Tables[field.Field.ObjectAlias];
                var definition = Schema.Definitions[table.TableName];
                var property = definition.Properties[field.Field.FieldName];
#>
                        <#=property.Name#> = <#=field.Field.ObjectAlias#>.<#=field.Field.FieldName#>,
<#
            }
#>
                    };

                var result = query.ToList();
                return result;
            }
        }

<#
        }
#>
    }

    #endregion

    #region Entities

<#
        foreach (var query in Queries)
        {
#>
    public partial class <#=query.ReturnTypeName#>
    {
<#
            foreach (var field in query.Query.Fields.Values)
            {
                var table = query.Query.Tables[field.Field.ObjectAlias];
                var definition = Schema.Definitions[table.TableName];
                var property = definition.Properties[field.Field.FieldName];
#>
        public <#=property.Type#> <#=property.Name#> { get; set; }
<#
            }
#>
    }

<#
        }
#>
    #endregion
}
<#
    }
        void Generate()
        {
            var parser = new JsonStoreSchemaParser();
            var path = Path.Combine(GetSolutionDirectory(), JsonStorePath);
            var files = Directory.GetFiles(path);

            foreach (var file in files)
            {
                var json = File.ReadAllText(file);

                if (Path.GetFileName(file).ToLower() == "schema.json")
                {
                    Schema = parser.ReadSchema(json);
                }
                else
                {
                    var q = parser.ReadQuery(json);
                    Queries.Add(q);
                }
            }
        }

        // t4 specific methods

        string GetSolutionDirectory()
        {
            var serviceProvider = this.Host as IServiceProvider;
            var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
            return System.IO.Path.GetDirectoryName(dte.Solution.FullName);
        }
#>